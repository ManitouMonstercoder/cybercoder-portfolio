import React, { useState } from 'react';
import { ArrowLeft, Wrench, AlertTriangle, Activity, Server, Database, Lock, Eye, Terminal, Code, Shield } from 'lucide-react';
import { Link } from 'react-router-dom';

function VulnerabilityScanner() {
  const [showLinkedInMessage, setShowLinkedInMessage] = useState(false);

  const handleLinkedInClick = (e) => {
    e.preventDefault();
    setShowLinkedInMessage(true);
    setTimeout(() => {
      setShowLinkedInMessage(false);
    }, 5000);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Navigation */}
      <nav className="bg-gray-800 py-4 sticky top-0 z-10">
        <div className="container mx-auto px-4 md:px-6">
          <Link to="/" className="flex items-center space-x-2 text-cyan-400 hover:text-cyan-300 transition-colors">
            <ArrowLeft className="h-5 w-5" />
            <span>Back to Portfolio</span>
          </Link>
        </div>
      </nav>

      {/* LinkedIn Message */}
      {showLinkedInMessage && (
        <div className="fixed top-20 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-6 py-3 rounded-md shadow-lg z-50 border border-cyan-500">
          <p className="flex items-center">
            <span className="mr-2">Sorry, LinkedIn is not available. Please use the Email Me button for contact.</span>
          </p>
        </div>
      )}

      {/* Project Header */}
      <header className="bg-gradient-to-r from-gray-900 to-gray-800 py-16">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-3xl md:text-5xl font-bold mb-6 flex items-center">
              <Wrench className="h-10 w-10 text-cyan-400 mr-4" />
              Automated Vulnerability Scanner
            </h1>
            <div className="flex flex-wrap gap-3 mb-8">
              <span className="bg-cyan-900/50 border border-cyan-700 px-3 py-1 rounded-full text-sm">Python</span>
              <span className="bg-cyan-900/50 border border-cyan-700 px-3 py-1 rounded-full text-sm">Web Security</span>
              <span className="bg-cyan-900/50 border border-cyan-700 px-3 py-1 rounded-full text-sm">Automation</span>
              <span className="bg-cyan-900/50 border border-cyan-700 px-3 py-1 rounded-full text-sm">Penetration Testing</span>
              <span className="bg-cyan-900/50 border border-cyan-700 px-3 py-1 rounded-full text-sm">OWASP</span>
            </div>
            <p className="text-xl text-gray-300">
              A custom vulnerability scanning tool that automates the process of identifying security weaknesses in web applications.
            </p>
          </div>
        </div>
      </header>

      {/* Project Overview */}
      <section className="py-16 bg-gray-800">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-2xl md:text-3xl font-bold mb-8">Project Overview</h2>
            
            <div className="bg-gray-700 p-8 rounded-lg shadow-lg mb-12">
              <p className="text-lg mb-6">
                The Automated Vulnerability Scanner is a sophisticated tool designed to identify security vulnerabilities in web applications. 
                It combines multiple scanning techniques to detect common security issues such as SQL injection, cross-site scripting (XSS), 
                broken authentication, and other OWASP Top 10 vulnerabilities.
              </p>
              <p className="text-lg mb-6">
                This project was developed to address the growing need for automated security testing in the software development lifecycle. 
                By integrating this scanner into CI/CD pipelines, development teams can identify and fix security issues early in the 
                development process, significantly reducing the risk of security breaches in production environments.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
                <div className="bg-gray-800 p-6 rounded-lg">
                  <h3 className="text-xl font-semibold mb-4 flex items-center">
                    <AlertTriangle className="h-6 w-6 text-cyan-400 mr-2" />
                    Problem
                  </h3>
                  <p className="text-gray-300">
                    Manual security testing is time-consuming and often inconsistent, while many organizations lack dedicated security resources to perform regular assessments.
                  </p>
                </div>
                <div className="bg-gray-800 p-6 rounded-lg">
                  <h3 className="text-xl font-semibold mb-4 flex items-center">
                    <Lock className="h-6 w-6 text-cyan-400 mr-2" />
                    Solution
                  </h3>
                  <p className="text-gray-300">
                    An automated scanner that can be integrated into development workflows to consistently identify vulnerabilities with minimal human intervention.
                  </p>
                </div>
              </div>
            </div>

            {/* Project Image */}
            <div className="mb-12 bg-gray-700 p-4 rounded-lg shadow-lg">
              <div className="aspect-video bg-gray-800 rounded flex items-center justify-center">
                <img 
                  src="https://images.unsplash.com/photo-1563206767-5b18f218e8de?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2000&q=80" 
                  alt="Vulnerability scanner dashboard" 
                  className="rounded max-h-full object-cover"
                />
              </div>
              <p className="text-sm text-gray-400 mt-2 text-center">Vulnerability Scanner Dashboard Interface</p>
            </div>
          </div>
        </div>
      </section>

      {/* Key Features */}
      <section className="py-16 bg-gray-900">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-2xl md:text-3xl font-bold mb-8">Key Features</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg transition-transform hover:transform hover:scale-105">
                <div className="flex items-center mb-4">
                  <Activity className="h-8 w-8 text-cyan-400 mr-3" />
                  <h3 className="text-xl font-semibold">Comprehensive Scanning</h3>
                </div>
                <p className="text-gray-300">
                  Detects a wide range of vulnerabilities including SQL injection, XSS, CSRF, broken authentication, and insecure configurations.
                </p>
              </div>
              
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg transition-transform hover:transform hover:scale-105">
                <div className="flex items-center mb-4">
                  <Eye className="h-8 w-8 text-cyan-400 mr-3" />
                  <h3 className="text-xl font-semibold">Dynamic Analysis</h3>
                </div>
                <p className="text-gray-300">
                  Performs runtime analysis of web applications, simulating real-world attack scenarios to identify vulnerabilities that static analysis might miss.
                </p>
              </div>
              
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg transition-transform hover:transform hover:scale-105">
                <div className="flex items-center mb-4">
                  <Terminal className="h-8 w-8 text-cyan-400 mr-3" />
                  <h3 className="text-xl font-semibold">CI/CD Integration</h3>
                </div>
                <p className="text-gray-300">
                  Seamlessly integrates with popular CI/CD pipelines including Jenkins, GitHub Actions, and GitLab CI, enabling automated security testing.
                </p>
              </div>
              
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg transition-transform hover:transform hover:scale-105">
                <div className="flex items-center mb-4">
                  <Database className="h-8 w-8 text-cyan-400 mr-3" />
                  <h3 className="text-xl font-semibold">Detailed Reporting</h3>
                </div>
                <p className="text-gray-300">
                  Generates comprehensive reports with vulnerability details, severity ratings, and remediation recommendations for security teams and developers.
                </p>
              </div>
            </div>

            <div className="bg-gray-800 p-8 rounded-lg shadow-lg mb-12">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <Server className="h-6 w-6 text-cyan-400 mr-2" />
                System Architecture
              </h3>
              <p className="text-gray-300 mb-6">
                The scanner is built on a modular architecture with the following components:
              </p>
              <ul className="space-y-4 text-gray-300">
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span><strong>Crawling Engine:</strong> Discovers all accessible endpoints and forms within the target application.</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span><strong>Attack Simulation Module:</strong> Executes various attack payloads against discovered endpoints to identify vulnerabilities.</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span><strong>Analysis Engine:</strong> Processes responses to determine if vulnerabilities exist based on application behavior.</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span><strong>Reporting System:</strong> Compiles findings into detailed reports with severity ratings and remediation guidance.</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span><strong>API Interface:</strong> Allows integration with other security tools and CI/CD pipelines.</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      {/* Technical Details */}
      <section className="py-16 bg-gray-800">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-2xl md:text-3xl font-bold mb-8">Technical Implementation</h2>
            
            <div className="bg-gray-700 p-8 rounded-lg shadow-lg mb-12">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <Code className="h-6 w-6 text-cyan-400 mr-2" />
                Technologies Used
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-lg mb-3">Core Technologies:</h4>
                  <ul className="space-y-2 text-gray-300">
                    <li>• Python 3.9+</li>
                    <li>• Beautiful Soup (HTML parsing)</li>
                    <li>• Requests (HTTP client)</li>
                    <li>• SQLAlchemy (Database ORM)</li>
                    <li>• Flask (API and dashboard)</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-semibold text-lg mb-3">Security Tools:</h4>
                  <ul className="space-y-2 text-gray-300">
                    <li>• OWASP ZAP (Integration)</li>
                    <li>• SQLmap (SQL injection testing)</li>
                    <li>• JWT_Tool (JWT vulnerability testing)</li>
                    <li>• Custom XSS payload library</li>
                    <li>• CSRF token analyzer</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="bg-gray-700 p-8 rounded-lg shadow-lg mb-12">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <Terminal className="h-6 w-6 text-cyan-400 mr-2" />
                Code Snippet: XSS Vulnerability Scanner
              </h3>
              <div className="bg-gray-900 p-4 rounded-lg overflow-x-auto">
                <pre className="text-gray-300 font-mono text-sm">
{`import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin, urlparse
from concurrent.futures import ThreadPoolExecutor

class XSSScanner:
    def __init__(self, base_url, max_threads=5):
        self.base_url = base_url
        self.visited_urls = set()
        self.vulnerable_urls = []
        self.max_threads = max_threads
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # XSS payloads for testing
        self.xss_payloads = [
            '<script>alert("XSS")</script>',
            '"><script>alert("XSS")</script>',
            '<img src="x" onerror="alert(\'XSS\')">',
            '"><img src="x" onerror="alert(\'XSS\')">',
            '<svg/onload=alert("XSS")>',
            '"><svg/onload=alert("XSS")>',
            'javascript:alert("XSS")',
            '<body onload="alert(\'XSS\')">',
            '<iframe src="javascript:alert(\'XSS\')">',
            '<input autofocus onfocus="alert(\'XSS\')">'
        ]
        
    def is_same_domain(self, url):
        """Check if URL belongs to the same domain as base_url"""
        base_domain = urlparse(self.base_url).netloc
        url_domain = urlparse(url).netloc
        return base_domain == url_domain
    
    def extract_links(self, html, url):
        """Extract all links from HTML content"""
        soup = BeautifulSoup(html, 'html.parser')
        links = []
        
        for a_tag in soup.find_all('a', href=True):
            href = a_tag['href']
            full_url = urljoin(url, href)
            
            # Filter out external links, anchors, and already visited
            if self.is_same_domain(full_url) and full_url not in self.visited_urls:
                links.append(full_url)
                
        return links
    
    def extract_forms(self, html):
        """Extract all forms from HTML content"""
        soup = BeautifulSoup(html, 'html.parser')
        forms = []
        
        for form in soup.find_all('form'):
            action = form.get('action', '')
            method = form.get('method', 'get').lower()
            inputs = []
            
            for input_field in form.find_all(['input', 'textarea']):
                input_name = input_field.get('name')
                input_type = input_field.get('type', 'text')
                
                if input_name and input_type != 'submit' and input_type != 'hidden':
                    inputs.append(input_name)
            
            if inputs:
                forms.append({
                    'action': action,
                    'method': method,
                    'inputs': inputs
                })
                
        return forms
    
    def test_xss_in_form(self, url, form):
        """Test XSS vulnerabilities in a form"""
        action_url = urljoin(url, form['action']) if form['action'] else url
        
        for payload in self.xss_payloads:
            data = {}
            for input_name in form['inputs']:
                data[input_name] = payload
            
            try:
                if form['method'] == 'post':
                    response = self.session.post(action_url, data=data, timeout=10)
                else:
                    response = self.session.get(action_url, params=data, timeout=10)
                
                # Check if the payload is reflected in the response
                if payload in response.text and not re.search(r'&(lt|gt|quot|apos|amp);', response.text):
                    self.vulnerable_urls.append({
                        'url': action_url,
                        'type': 'XSS in form',
                        'payload': payload,
                        'form': form
                    })
                    break
            except Exception as e:
                print(f"Error testing form at {action_url}: {str(e)}")
    
    def test_xss_in_url(self, url):
        """Test XSS vulnerabilities in URL parameters"""
        parsed_url = urlparse(url)
        if not parsed_url.query:
            return
        
        # Extract parameters from URL
        params = {}
        for param in parsed_url.query.split('&'):
            if '=' in param:
                key, value = param.split('=', 1)
                params[key] = value
        
        for param_name in params:
            for payload in self.xss_payloads:
                test_params = params.copy()
                test_params[param_name] = payload
                
                query = '&'.join([f"{k}={v}" for k, v in test_params.items()])
                test_url = url.split('?')[0] + '?' + query
                
                try:
                    response = self.session.get(test_url, timeout=10)
                    
                    # Check if the payload is reflected in the response
                    if payload in response.text and not re.search(r'&(lt|gt|quot|apos|amp);', response.text):
                        self.vulnerable_urls.append({
                            'url': url,
                            'type': 'XSS in URL parameter',
                            'payload': payload,
                            'parameter': param_name
                        })
                        break
                except Exception as e:
                    print(f"Error testing URL parameter at {url}: {str(e)}")
    
    def crawl_and_scan(self, url):
        """Crawl a URL and scan for XSS vulnerabilities"""
        if url in self.visited_urls:
            return
        
        self.visited_urls.add(url)
        print(f"Scanning: {url}")
        
        try:
            response = self.session.get(url, timeout=10)
            html = response.text
            
            # Extract and test forms
            forms = self.extract_forms(html)
            for form in forms:
                self.test_xss_in_form(url, form)
            
            # Test URL parameters
            self.test_xss_in_url(url)
            
            # Extract links for further crawling
            links = self.extract_links(html, url)
            
            with ThreadPoolExecutor(max_workers=self.max_threads) as executor:
                executor.map(self.crawl_and_scan, links)
                
        except Exception as e:
            print(f"Error crawling {url}: {str(e)}")
    
    def scan(self):
        """Start the scanning process"""
        print(f"Starting XSS scan on {self.base_url}")
        self.crawl_and_scan(self.base_url)
        
        if self.vulnerable_urls:
            print(f"Found {len(self.vulnerable_urls)} XSS vulnerabilities:")
            for vuln in self.vulnerable_urls:
                print(f"- {vuln['url']} ({vuln['type']})")
            return self.vulnerable_urls
        else:
            print("No XSS vulnerabilities found.")
            return []
`}
                </pre>
              </div>
              <p className="text-sm text-gray-400 mt-4">
                This code snippet demonstrates the XSS vulnerability scanner module that crawls web applications and tests for cross-site scripting vulnerabilities.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Challenges and Results */}
      <section className="py-16 bg-gray-900">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-2xl md:text-3xl font-bold mb-8">Challenges & Results</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h3 className="text-xl font-semibold mb-4">Challenges Faced</h3>
                <ul className="space-y-3 text-gray-300">
                  <li className="flex items-start">
                    <span className="text-red-400 mr-2">•</span>
                    <span>Handling modern single-page applications with complex JavaScript frameworks</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-red-400 mr-2">•</span>
                    <span>Avoiding false positives while maintaining high detection rates</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-red-400 mr-2">•</span>
                    <span>Bypassing sophisticated WAF (Web Application Firewall) protections</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-red-400 mr-2">•</span>
                    <span>Balancing scanning thoroughness with performance and resource usage</span>
                  </li>
                </ul>
              </div>
              
              <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h3 className="text-xl font-semibold mb-4">Key Results</h3>
                <ul className="space-y-3 text-gray-300">
                  <li className="flex items-start">
                    <span className="text-green-400 mr-2">•</span>
                    <span>Identified 37 critical vulnerabilities in a production application that passed manual testing</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-400 mr-2">•</span>
                    <span>Reduced average vulnerability assessment time from 3 days to 4 hours</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-400 mr-2">•</span>
                    <span>Achieved 94% detection rate with only 5% false positives in benchmark testing</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-400 mr-2">•</span>
                    <span>Successfully integrated with CI/CD pipelines in 3 different enterprise environments</span>
                  </li>
                </ul>
              </div>
            </div>

            <div className="bg-gray-800 p-8 rounded-lg shadow-lg">
              <h3 className="text-xl font-semibold mb-6">Future Enhancements</h3>
              <p className="text-gray-300 mb-6">
                The Automated Vulnerability Scanner is under continuous development with the following planned enhancements:
              </p>
              <ul className="space-y-3 text-gray-300">
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span>Implementation of a headless browser engine to better handle JavaScript-heavy applications</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span>Integration with threat intelligence feeds to detect emerging vulnerability patterns</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span>Development of machine learning models to reduce false positives and improve detection accuracy</span>
                </li>
                <li className="flex items-start">
                  <span className="text-cyan-400 mr-2">•</span>
                  <span>Addition of API security testing capabilities for REST and GraphQL endpoints</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-800 py-8">
        <div className="container mx-auto px-4 md:px-6 text-center">
          <Link to="/" className="inline-flex items-center text-cyan-400 hover:text-cyan-300 transition-colors mb-6">
            <ArrowLeft className="h-5 w-5 mr-2" />
            <span>Back to Portfolio</span>
          </Link>
          <div className="flex items-center justify-center mb-4">
            <Shield className="h-6 w-6 text-cyan-400 mr-2" />
            <span className="font-bold text-xl">CyberPortfolio</span>
          </div>
          <p className="text-gray-400">
            © {new Date().getFullYear()} • Cyber Security Engineer • All Rights Reserved
          </p>
        </div>
      </footer>
    </div>
  );
}

export default VulnerabilityScanner;